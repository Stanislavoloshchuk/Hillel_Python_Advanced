"""1. Написать свой cache декоратор c максимальным размером кеша и его очисткой
при необходимости."""

def do_cache(maxsize):
    def decorator(func):
        cache = dict()
        def wrapper(*args):
            if func(*args) in cache:
                return cache[func(*args)]
            if len(cache) >= maxsize:
                for x, y in cache.items():
                    del cache[x]
                    break
            cache[func(*args)] = func(*args)
            return cache[func(*args)]
        return wrapper
    return decorator

@do_cache(maxsize=2)
def test(v, i):
    return v + i
print(test(2, 1))
print(test(6, 7))
print(test(9, 7))
print(test(81, 7))

"""
2. Написать свой декоратор который будет проверять остаток от деления числа 100
на результат работы функции ниже. Если остаток от деления = 0, вывести
сообщение We are OK!, иначе Bad news guys, we got {остаток от деления}.
Этот декоратор не должен возвращать результат работы функции. Только один из
указанных принтов.
"""
i = input("input a number:")
def div100(func):
    def wrapper(*args):
        to_div = int(args[0]) % 100
        if to_div == 0:
            print("We are OK!")
        else:
            print(f"Bad news guys, we got {to_div}")

    return wrapper
@div100
def test2(v):
    return v
test2(i)

"""
3. Декоратор должен кэшировать значения аргументов, считать количество
использований одних и тех же аргументов и печатать их перед исполнением
декорируемой функции.
"""

def count_args(func):
    cache = dict()
    cache_count = dict()
    def wrapper(*args):
        if args not in cache_count:
            cache_count[args] = 0
        cache_count[args] += 1
        print(f'Here you are{args}:{cache_count[args]}')
        if args not in cache:
            cache[args] = func(*args)
        return cache[args]

    return wrapper


@count_args
def my_func(a, b):
    return a, b
my_func("one", "two")
my_func("one", "two")
my_func("three", "four")
